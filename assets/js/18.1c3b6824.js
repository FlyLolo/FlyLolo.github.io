(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{313:function(e,t,o){"use strict";function n(e,t,o,n,r,l,a,s){var i,p="function"==typeof e?e.options:e;if(t&&(p.render=t,p.staticRenderFns=o,p._compiled=!0),n&&(p.functional=!0),l&&(p._scopeId="data-v-"+l),a?(i=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),r&&r.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(a)},p._ssrRegister=i):r&&(i=s?function(){r.call(this,(p.functional?this.parent:this).$root.$options.shadowRoot)}:r),i)if(p.functional){p._injectStyles=i;var c=p.render;p.render=function(e,t){return i.call(t),c(e,t)}}else{var v=p.beforeCreate;p.beforeCreate=v?[].concat(v,i):[i]}return{exports:e,options:p}}o.d(t,"a",(function(){return n}))},382:function(e,t,o){"use strict";o.r(t);var n=o(313),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("p",[e._v("本文从一个最简单的项目开始，通过一个小例子了解一下ABP如何创建一个项目，并进一步学习ABP自动生成的各个模块的含义及使用方法。")]),e._v(" "),o("h2",{attrs:{id:"_1-创建项目"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建项目"}},[e._v("#")]),e._v(" 1. 创建项目")]),e._v(" "),o("h2",{attrs:{id:"_1-安装cli"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_1-安装cli"}},[e._v("#")]),e._v(" 1. 安装cli")]),e._v(" "),o("p",[e._v("首先在命令行安装cli：\n"),o("code",[e._v("dotnet tool install -g Volo.Abp.Cli")]),e._v("\n如果安装过了，需要更新可以执行如下命令：\n"),o("code",[e._v("dotnet tool update -g Volo.Abp.Cli")])]),e._v(" "),o("h2",{attrs:{id:"_2-使用cli创建项目"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用cli创建项目"}},[e._v("#")]),e._v(" 2. 使用cli创建项目")]),e._v(" "),o("hr"),e._v(" "),o("p",[e._v("abp的提供了多样的项目类型：\nOptions")]),e._v(" "),o("ul",[o("li",[e._v("--template 或者 -t: 指定模板. 默认的模板是 app,会生成web项目.可用的模板有:\n"),o("ul",[o("li",[e._v("app (default): 应用程序模板. 其他选项:\n"),o("ul",[o("li",[e._v("--ui 或者 -u: 指定ui框架.默认mvc框架.其他选项:\n"),o("ul",[o("li",[e._v("mvc: ASP.NET Core MVC.此模板的其他选项:\n"),o("ul",[o("li",[e._v("--tiered: 创建分层解决方案,Web和Http Api层在物理上是分开的.如果未指定会创建一个分层的解决方案,此解决方案没有那么复杂,适合大多数场景.")])])]),e._v(" "),o("li",[e._v("angular: Angular. 这个模板还有一些额外的选项:\n"),o("ul",[o("li",[e._v("--separate-identity-server: 将Identity Server应用程序与API host应用程序分开. 如果未指定,则服务器端将只有一个端点.")])])]),e._v(" "),o("li",[e._v("none: 无UI. 这个模板还有一些额外的选项:\n"),o("ul",[o("li",[e._v("--separate-identity-server: 将Identity Server应用程序与API host应用程序分开. 如果未指定,则服务器端将只有一个端点.")])])])])]),e._v(" "),o("li",[e._v("--mobile 或者 -m: 指定移动应用程序框架. 默认框架是 react-native. 其他选项:\n"),o("ul",[o("li",[e._v("none: 不包含移动应用程序.")]),e._v(" "),o("li",[e._v("react-native: React Native.")])])]),e._v(" "),o("li",[e._v("--database-provider 或者 -d: 指定数据库提供程序.默认是 ef.其他选项:\n"),o("ul",[o("li",[e._v("ef: Entity Framework Core.")]),e._v(" "),o("li",[e._v("mongodb: MongoDB.")])])])])]),e._v(" "),o("li",[e._v("module: Module template. 其他选项:\n"),o("ul",[o("li",[e._v("--no-ui: 不包含UI.仅创建服务模块(也称为微服务 - 没有UI).")])])]),e._v(" "),o("li",[e._v("console: Console template.")])])]),e._v(" "),o("li",[e._v("--output-folder 或者 -o: 指定输出文件夹,默认是当前目录.")]),e._v(" "),o("li",[e._v("--version 或者 -v: 指定ABP和模板的版本.它可以是 release tag 或者 branch name. 如果没有指定,则使用最新版本.大多数情况下,你会希望使用最新的版本.")]),e._v(" "),o("li",[e._v("--template-source 或者 -ts: 指定自定义模板源用于生成项目,可以使用本地源和网络源(例如 D\\localTemplate 或 https://"),o("your",{attrs:{url:""}},[e._v(".zip).")])],1),e._v(" "),o("li",[e._v("--create-solution-folder 或者 -csf: 指定项目是在输出文件夹中的新文件夹中还是直接在输出文件夹中.")]),e._v(" "),o("li",[e._v("--connection-string 或者 -cs: 重写所有 appsettings.json 文件的默认连接字符串. 默认连接字符串是 Server=localhost;Database=MyProjectName;Trusted_Connection=True;MultipleActiveResultSets=true. 如果你不想使用默认,你可以设置自己的连接字符串. 默认的数据库提供程序是 SQL Server, 所以你只能输入SQL Server连接字符串!")]),e._v(" "),o("li",[e._v("--local-framework-ref --abp-path: 使用对项目的本地引用,而不是替换为NuGet包引用.")])]),e._v(" "),o("p",[o("strong",[e._v("ABP提供了多样的的配置项用于创建不同类型的项目")]),e._v("，为了尽量减少项目的依赖，便于理解，我们选择module模板并指定不包含UI。\n执行如下命令，创建一个博客项目：\n"),o("code",[e._v("abp new FlyLolo.Blog1 -t module --no-ui")]),e._v("\n未指定 --output-folder的情况下，会在C:\\Users\\【用户名】下创建一个名为FlyLolo.Blog的文件夹。\n#二、项目结构\n##1.文件结构图\n默认的文件结构如下图：\n"),o("img",{attrs:{src:"/blogimages/13407215/548134-20200803233001824-1516144326.png",alt:""}}),e._v('\n图中红框中的Docker、Git等相关文件暂时忽略，不影响对项目的理解。\n在此目录的命令行执行“dotnet restore"还原包。\n##2.common.props\ncommon.props文件是一个通用的项目设置文件。其内容默认如下：')]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('<project>\n  <propertygroup>\n    <langversion>latest</langversion>\n    <version>0.1.0</version>\n    <nowarn>$(NoWarn);CS1591</nowarn>\n\t<abpprojecttype>module</abpprojecttype>\n  </propertygroup>\n  <itemgroup>\n    <packagereference include="SourceLink.Create.CommandLine" version="2.8.3" privateassets="All"></packagereference>\n  </itemgroup>\n</project>\n')])])]),o("p",[e._v("随便在vs中右键点击一个项目选择【编辑项目文件】，例如“FlyLolo.Blog.Application”项目的项目文件内容如下：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('<project sdk="Microsoft.NET.Sdk">\n  <import project="..\\..\\common.props"></import>\n  <propertygroup>\n    <targetframework>netstandard2.0</targetframework>\n    <rootnamespace>FlyLolo.Blog</rootnamespace>\n  </propertygroup>\n  <itemgroup>\n    <packagereference include="Volo.Abp.AutoMapper" version="3.0.5"></packagereference>\n    <packagereference include="Volo.Abp.Ddd.Application" version="3.0.5"></packagereference>\n    <projectreference include="..\\FlyLolo.Blog.Application.Contracts\\FlyLolo.Blog.Application.Contracts.csproj"></projectreference>\n    <projectreference include="..\\FlyLolo.Blog.Domain\\FlyLolo.Blog.Domain.csproj"></projectreference>\n  </itemgroup>\n</project>\n')])])]),o("p",[e._v("其中可见对common.props文件的引用，而且两个文件的内容格式非常相似。可以想到common.props文件是将解决方案中众多项目文件中的通用部分提取出来，就像多个HTML文件引用同一个Css一样。\n例如需要在项目设置输出xml文件的时候，如果部分公共类未设置相应的注释，则会有警告出现，这样的情况一般在项目中设置CS1591取消警告，如下图\n"),o("img",{attrs:{src:"/blogimages/13407215/548134-20200804223823595-1918767752.png",alt:""}}),e._v("\n而在common.props文件中我们看到了CS1591的设置，这使所有引用了此common.props文件的项目都取消了警告显示。如果我们还会需要设置CSXXXX或者有其他多个项目都要修改的需求，只需要改common.props文件即可。\n##3.解决方案介绍\n解决方案如下图：\n"),o("img",{attrs:{src:"/blogimages/13407215/548134-20200806210646497-404403917.png",alt:""}}),e._v("\n可以看到所有项目分部在host、src、test三个文件夹。\nhost：主要是存放web/api项目。\nsrc：存放应用层、基础设施层等。\ntest：存放测试项目。\n------------host-----------------")]),e._v(" "),o("ul",[o("li",[o("strong",[e._v("FlyLolo.Blog.Host.Shared")]),e._v("\n此项目比较简单，只有一个类，MultiTenancyConsts\n"),o("img",{attrs:{src:"https://img2020.cnblogs.com/blog/548134/202008/548134-20200806221109828-1632459948.png",alt:""}})])]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("    public static class MultiTenancyConsts\n    {\n        /* Enable/disable multi-tenancy in a single point\n         * to test your module with multi-tenancy.\n         */\n        public const bool IsEnabled = false;\n    }\n")])])]),o("p",[e._v("用于设置是否开启多租户功能。")]),e._v(" "),o("ul",[o("li",[o("strong",[e._v("FlyLolo.Blog.HttpApi.Host")]),e._v("\n业务API项目，集成了swagger，是业务API的访问入口，但实际上大部分业务代码均不在此层，见下面项目介绍。")]),e._v(" "),o("li",[o("strong",[e._v("FlyLolo.Blog.IdentityServer")]),e._v("\nABP集成了IdentityServer4，此项目就是利用IdentityServer4实现的认证服务。\n-----------src--------------------")]),e._v(" "),o("li",[o("strong",[e._v("FlyLolo.Blog.HttpApi")]),e._v("\nController层，自己写的Controller放置在此层而不是host项目中。")]),e._v(" "),o("li",[o("strong",[e._v("FlyLolo.Blog.Application")]),e._v("\nService的实现层，主要的业务代码大多在此，")]),e._v(" "),o("li",[o("strong",[e._v("FlyLolo.Blog.Application.Contracts")]),e._v("\nContracts，合约、契约的意思，其中主要内容为DTO和众多的IServer接口。")]),e._v(" "),o("li",[o("strong",[e._v("FlyLolo.Blog.Domain")]),e._v("\n用于放置实体和仓储接口等。")]),e._v(" "),o("li",[o("strong",[e._v("FlyLolo.Blog.Domain.Shared")]),e._v("\n包含常量,枚举等类型，可以被所有层引用，所有不能包含业务逻辑等。")]),e._v(" "),o("li",[o("strong",[e._v("FlyLolo.Blog.EntityFrameworkCore")]),e._v("\n基础设施层，通过集成Entity Framework Core实现对数据库的访问。")]),e._v(" "),o("li",[o("strong",[e._v("FlyLolo.Blog.MongoDB")]),e._v("\n基础设施层，对MongoDB数据库的访问。")]),e._v(" "),o("li",[o("strong",[e._v("FlyLolo.Blog.HttpApi.Client")]),e._v("\n用于设置代理服务，通过ABP框架提供的动态代理HTTP C＃客户端的功能实现对其他服务的访问。\n")])])])}),[],!1,null,null,null);t.default=r.exports}}]);